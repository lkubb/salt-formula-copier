---
# Static template data
!include questions/auto_general.yml
---
# Decide whether to ask init-only questions.
# This relies on the templated answers file hardcoding `initialized`.
init_questions:
  type: bool
  default: "{= initialized is not defined or initialized is false =}"
  when: false

flavor_init:
  type: str
  help: Choose which template flavor to base the project on. Cannot be changed later.
  choices:
    General: general
    Compose: compose
    Application: app
  when: '{= init_questions =}'

flavor:
  type: str
  choices:
    General: general
    Compose: compose
    Application: app
  when: false
  default: '{= flavor_recorded if flavor_recorded is defined else flavor_init =}'

service_name:
  type: str
  help: >
    Name of the managed program.
  placeholder: '{= "Git" if flavor == "app" else "Gitea" =}'
  validator: >-
    {!- if not service_name !}
    Service name cannot be empty.
    {!- endif !}

service_abbr:
  type: str
  help: >
    A slugified version of `service_name`.
  placeholder: gitea
  default: '{= service_name | lower | regex_replace("[^a-z0-9]", "-") =}'
  validator: >-
    {!- if not service_abbr !}
    Service abbreviation cannot be empty.
    {!- endif !}

abbr_pysafe:
  type: str
  help: >
    A short and pythonic version of `service_name`.
  placeholder: gitea
  default: '{= service_abbr | lower | regex_replace("\W", "_") =}'
  validator: >-
    {!- if not abbr_pysafe !}
    Cannot be empty.
    {!- endif !}
    {!- if not (abbr_pysafe | regex_search("^[a-z][a-z0-9_]+$")) !}
    Must start with a lowercase letter, followed by lowercase letters/digits or underscores.
    {!- endif !}

extmods:
  type: str
  help: Include custom modules in the formula
  default: []
  choices:
    - auth
    - beacon
    - cache
    - cloud
    - engine
    - execution
    - executor
    - fileserver
    - grain
    - log_handler
    - matcher
    - metaproxy
    - netapi
    - output
    - pillar
    - pkgdb
    - pkgfile
    - proxy
    - queue
    - renderer
    - returner
    - roster
    - runner
    - sdb
    - serializer
    - state
    - thorium
    - token
    - top
    - util
    - wheel
    - wrapper
  multiselect: true
---
# Computed project meta vars (all)
!include questions/auto_project_meta.yml
---
# Which OS to support (all)
!include questions/base_os_support.yml
---
# Package questions (not `compose` flavor)
!include questions/base_pkg.yml
---
# `general` flavor
!include questions/flavor_general.yml
---
# `compose` flavor
!include questions/flavor_compose.yml
---
# `app` flavor
!include questions/flavor_app.yml
---
# default parameters

lookup:
  type: yaml
  multiline: true
  help: >
    An arbitrarily nested mapping/dictionary that describes lookup data that the
    user should not have to modify. Examples include package dependencies,
    some paths, package names etc.
  validator: >-
    {!- if lookup is not mapping !}Must be a mapping{!- endif !}
  default: '{}'

# Example data:
# foo:
#   bar: true
#   baz: quux
settings:
  type: yaml
  multiline: true
  help: >
    An arbitrarily nested mapping/dictionary that describes global parameters
    for the formula. Examples include package version and system configuration
    for the managed program.
  validator: >-
    {!- if settings is not mapping !}Must be a mapping{!- endif !}
  default: '{}'

# Example data:
# foo:
#   desc: Settings for the `foo` submodule
# foo:bar:
#   desc: Specify bar stuff
# foo:baz:
#   desc: Specify baz stuff
settings_descriptions:
  type: yaml
  multiline: true
  default: '{}'
  help: >
    Description of `settings` values. Keys are flattened paths, values mappings (with keys: `desc`)

---
# Customizable project metadata and docs questions
!include questions/base_project_meta.yml
---
# Default `settings`/`lookup` adjustments per flavor
!include questions/auto_settings.yml
---
# ========================================
# | Migrations between template versions |
# ========================================


# =====================================
# | Copier settings for this template |
# =====================================

# Let's require a recent version
_min_copier_version: "9.3.0"

# The template root is found here
_subdirectory: 'project_{= flavor =}'

_skip_if_exists:
  # This file is autogenerated by a pre-commit hook.
  - docs/ref/states.rst

_envops:
  block_start_string: '{!'
  block_end_string: '!}'
  variable_start_string: '{='
  variable_end_string: '=}'
  comment_start_string: '{@'
  comment_end_string: '@}'

# We need those extensions as helpers
_jinja_extensions:
  - copier_templates_extensions.TemplateExtensionLoader
  - jinja_extensions/formula.py:YamlDumper
  - jinja_extensions/formula.py:RecursiveData
  - jinja2.ext.do
  - jinja2.ext.loopcontrols
